ref:
  fasta: /varidata/researchtemp/hpctmp/biscuit_reference_hg38/EMseq_GRCh38.primary_assembly.genome.fa.gz
  index: /varidata/researchtemp/hpctmp/biscuit_reference_hg38/EMseq_GRCh38.primary_assembly.genome.fa.gz # this does not need to be different from config["ref"]["fasta"], but might be useful if 2-bit packed reference doesn't have .fa extension or is named differently
  assets: /varidata/researchtemp/hpctmp/biscuit_reference_hg38/hg38_biscuit_assets # prebuilt assets and scripts to build custom assets can be found at https://github.com/huishenlab/biscuit/releases/

trim_galore:
   trim_before_BISCUIT: FALSE
   quality: 30 #  Trim low-quality ends from reads in addition to adapter removal.
   hard_trim_R2: 0 # --clip_R2 <int> argument from trim_galore. Must be integer. For swift kit, set this to 14 or 15

biscuit:
   biscuit_blaster_version: v1 # specify v1 or v2
   lib_type: 0 # biscuit -b option (for strandedness)

build_ref_with_methylation_controls: FALSE # IF config["append_control_vectors"], THEN a new reference is used that is made and indexed during the workflow. 
# This new reference is the config["ref"]["fasta"] (line 2 of this document) and the two control vectors included in bin/.
# Reads will be mapped to this new reference...

control_vectors: FALSE # If config["control_vectors"], then the bed files for the controls be extracted and summarized in a plot in analysis/qc_vectors/control_vector_boxplot.pdf
# Only useful if the ref genome included the control vectors with fasta headers >J02459.1 (lamdba / unmethylated control) and >M77789.2 (puc19 / methylated control). 
# The ref genome can be modified automatically to include these control vectors as the first two contigs by setting config["build_ref_with_methylation_controls"].

is_nome: FALSE # If data is NOMe-seq data, set to TRUE

run_fastq_screen: FALSE # run fastq_screen with --bisulfite mode (uses Bismark)
fastq_screen_conf: /primary/projects/bbc/references/fastq_screen/downloaded_20200309/FastQ_Screen_Genomes_Bisulfite/fastq_screen.conf # option passed to --conf in fastq_screen
 
generate_snps: FALSE # do you want biscuit to call SNPs?
epiread: FALSE # do you want to get epiread format?

sam_header: #
   PL: il
   PU: nv
   LB: b1
  
# If your system does not use environemntal modules, then the executables for all of the modules must be in your path. If all dependency
# executables are in your path and the module is still specified (with e.g. NULL) the workflow will still run with warnings that modules could
# not be loaded.
envmodules: 
   samtools: bbc/samtools/samtools-1.9 # "module load <string>" should work on your command line, e.g. "module load samtools/samtools-1.9"
   R: bbc/R/R-4.1.0 # 
   snakemake: bbc/snakemake/snakemake-5.28.0
   trim_galore: bbc/trim_galore/trim_galore-0.6.0
   #~ biscuit: bbc/biscuit/biscuit_0_3_16
   #~ biscuit: bbc/biscuit/biscuit_dev
   biscuit: bbc/biscuit/biscuit_1_0_0
   samblaster: bbc/samblaster/samblaster-0.1.24
   htslib: bbc/htslib/htslib-1.10.2
   bedtools: bbc/bedtools/bedtools-2.29.2
   fastqc: bbc/fastqc/fastqc-0.11.9
   multiqc: bbc/multiqc/multiqc-1.9
   parallel: bbc/parallel/parallel-20191122
   pigz: bbc/pigz/pigz-2.4
   fastq_screen: bbc/fastq_screen/fastq_screen-0.14.0
   bismark: bbc/bismark/bismark-0.22.3
   # if you e.g. don't have a module system
   # then put the envmodules as follows:
   #~ samtools: NULL
   #~ R: NULL
   #~ snakemake: NULL
   #~ trim_galore: NULL
   #~ biscuit: NULL
   #~ htslib: NULL
   #~ bedtools: NULL
   #~ fastqc: NULL
   #~ multiqc: NULL
   #~ parrallel: NULL
   #~ pigz: NULL
   #~ fastq_screen: NULL
   #~ bismark: NULL

hpcParameters:
   maxThreads: 28
   maxMemoryGb: 245
   intermediateMemoryGb: 80
   smallMemoryGb: 20
   trimThreads: 8
   pileupThreads: 8
   
walltime:
   short: 1:00:00
   medium: 24:00:00
   long: 200:00:00
